name: Code Quality & Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8.15.0'

jobs:
  # Code quality analysis
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: ~/.nx/cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/nx.json', '**/package.json', '**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Run ESLint
        run: pnpm lint

      - name: Run Prettier check
        run: pnpm format:check

      - name: Type checking
        run: pnpm type-check

      - name: Generate code coverage
        run: |
          # Run tests with coverage
          pnpm test --coverage || echo "Some tests may have failed, but coverage was generated"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          echo "Running npm audit..."
          pnpm audit --audit-level moderate || echo "Audit completed with findings"

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload Snyk results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-results
          path: snyk.sarif

  # Dependency vulnerability check
  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for known vulnerabilities
        run: |
          echo "Checking for known vulnerabilities in dependencies..."

          # Check for high severity vulnerabilities
          HIGH_VULNS=$(pnpm audit --json | jq '.metadata.vulnerabilities.high // 0')
          MODERATE_VULNS=$(pnpm audit --json | jq '.metadata.vulnerabilities.moderate // 0')

          echo "High severity vulnerabilities: $HIGH_VULNS"
          echo "Moderate severity vulnerabilities: $MODERATE_VULNS"

          if [ "$HIGH_VULNS" -gt 0 ]; then
            echo "‚ùå High severity vulnerabilities found!"
            exit 1
          elif [ "$MODERATE_VULNS" -gt 5 ]; then
            echo "‚ö†Ô∏è Many moderate severity vulnerabilities found!"
            exit 1
          else
            echo "‚úÖ No critical vulnerabilities found"
          fi

  # License compliance check
  license-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check licenses
        run: |
          echo "Checking package licenses..."
          pnpm list --depth=0 --json | jq -r '.dependencies | to_entries[] | "\(.key): \(.value.license // "unknown")"' > licenses.txt

          echo "Package licenses:"
          cat licenses.txt

          # Check for problematic licenses
          if grep -q "GPL" licenses.txt; then
            echo "‚ö†Ô∏è GPL licensed packages found - review required"
          fi

          if grep -q "AGPL" licenses.txt; then
            echo "‚ö†Ô∏è AGPL licensed packages found - review required"
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.txt

  # Code complexity analysis
  complexity-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install complexity analysis tools
        run: |
          pnpm add -D -w complexity-report

      - name: Analyze code complexity
        run: |
          echo "Analyzing code complexity..."

          # Find all TypeScript files
          find . -name "*.ts" -not -path "./node_modules/*" -not -path "./dist/*" -not -path "./.next/*" > ts-files.txt

          echo "Found $(wc -l < ts-files.txt) TypeScript files"

          # Basic complexity metrics
          echo "## Code Complexity Report" > complexity-report.md
          echo "" >> complexity-report.md
          echo "### File Counts" >> complexity-report.md
          echo "- TypeScript files: $(wc -l < ts-files.txt)" >> complexity-report.md
          echo "- Total lines of code: $(find . -name "*.ts" -not -path "./node_modules/*" -not -path "./dist/*" -not -path "./.next/*" -exec wc -l {} + | tail -1 | awk '{print $1}')" >> complexity-report.md
          echo "" >> complexity-report.md

          # Check for large files (>500 lines)
          echo "### Large Files (>500 lines)" >> complexity-report.md
          find . -name "*.ts" -not -path "./node_modules/*" -not -path "./dist/*" -not -path "./.next/*" -exec wc -l {} + | awk '$1 > 500 {print "- " $2 ": " $1 " lines"}' >> complexity-report.md

          cat complexity-report.md

      - name: Upload complexity report
        uses: actions/upload-artifact@v4
        with:
          name: complexity-report
          path: complexity-report.md

  # Summary
  quality-summary:
    runs-on: ubuntu-latest
    needs:
      [
        code-quality,
        security-scan,
        dependency-check,
        license-check,
        complexity-analysis,
      ]
    if: always()
    steps:
      - name: Code Quality Summary
        run: |
          echo "## üîç Code Quality & Security Summary"
          echo ""
          echo "| Check | Status |"
          echo "|-------|--------|"
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '‚úÖ' || '‚ùå' }} |"
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '‚úÖ' || '‚ùå' }} |"
          echo "| Dependency Check | ${{ needs.dependency-check.result == 'success' && '‚úÖ' || '‚ùå' }} |"
          echo "| License Check | ${{ needs.license-check.result == 'success' && '‚úÖ' || '‚ùå' }} |"
          echo "| Complexity Analysis | ${{ needs.complexity-analysis.result == 'success' && '‚úÖ' || '‚ùå' }} |"
          echo ""

          if [ "${{ needs.code-quality.result }}" = "success" ] && [ "${{ needs.security-scan.result }}" = "success" ] && [ "${{ needs.dependency-check.result }}" = "success" ]; then
            echo "‚úÖ All quality checks passed!"
          else
            echo "‚ùå Some quality checks failed. Please review the results."
            exit 1
          fi
