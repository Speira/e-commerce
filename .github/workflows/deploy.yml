name: Deploy

on:
  push:
    branches: [main]
    paths:
      - 'root-infra/**'
      - 'root-lib/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests (use with caution)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8.15.0'
  AWS_REGION: 'us-east-1'

jobs:
  # Determine environment
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      skip_tests: ${{ steps.env.outputs.skip_tests }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "skip_tests=${{ github.event.inputs.skip_tests }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "skip_tests=false" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "skip_tests=false" >> $GITHUB_OUTPUT
          fi

  # Run tests unless skipped
  test:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.skip_tests == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: ~/.nx/cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/nx.json', '**/package.json', '**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Run tests
        run: pnpm test

  # Deploy infrastructure
  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [setup, test]
    if: always() && (needs.test.result == 'success' || needs.setup.outputs.skip_tests == 'true')
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: ~/.nx/cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/nx.json', '**/package.json', '**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Bootstrap CDK (if needed)
        run: |
          if [ "${{ needs.setup.outputs.environment }}" = "production" ]; then
            pnpm bootstrap
          fi

      - name: Build Lambda functions
        run: pnpm build:lambda

      - name: Deploy infrastructure
        run: |
          if [ "${{ needs.setup.outputs.environment }}" = "production" ]; then
            pnpm deploy:full
          else
            pnpm deploy
          fi

      - name: Get deployment outputs
        run: pnpm outputs

      - name: Upload deployment outputs
        uses: actions/upload-artifact@v4
        with:
          name: deployment-outputs-${{ needs.setup.outputs.environment }}
          path: root-infra/cdk/outputs.json

  # Deploy UI (if applicable)
  deploy-ui:
    runs-on: ubuntu-latest
    needs: [setup, deploy-infrastructure]
    if: always() && needs.deploy-infrastructure.result == 'success'
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build UI
        run: nx run visitors:build

      - name: Upload UI build
        uses: actions/upload-artifact@v4
        with:
          name: ui-build-${{ needs.setup.outputs.environment }}
          path: root-ui/visitors/.next/

  # Post-deployment verification
  verify:
    runs-on: ubuntu-latest
    needs: [setup, deploy-infrastructure, deploy-ui]
    if: always() && needs.deploy-infrastructure.result == 'success'
    steps:
      - name: Download deployment outputs
        uses: actions/download-artifact@v4
        with:
          name: deployment-outputs-${{ needs.setup.outputs.environment }}
          path: ./outputs

      - name: Verify deployment
        run: |
          echo "✅ Deployment to ${{ needs.setup.outputs.environment }} completed successfully!"
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "Deployment outputs available in ./outputs/"

          if [ -f "./outputs/outputs.json" ]; then
            echo "Deployment outputs:"
            cat ./outputs/outputs.json
          fi

  # Notify on failure
  notify-failure:
    runs-on: ubuntu-latest
    needs: [setup, test, deploy-infrastructure, deploy-ui]
    if: failure()
    steps:
      - name: Notify deployment failure
        run: |
          echo "❌ Deployment to ${{ needs.setup.outputs.environment }} failed!"
          echo "Please check the logs and fix the issues before retrying."
